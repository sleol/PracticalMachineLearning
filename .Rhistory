find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("kernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
?help plot
?plot
0.2^4
0.5^4
?pnorm
pnorm(93,100,10)
pnorm(70,80,10)
qnorm(0.95,1100,75)
0.5^5
?ppois
ppois(10,5*3)
20/sqrt(100)
pnorm(14,15,10)
pnorm(16,15,10)
pnorm(14,15,10)+pnorm(14,15,10)
(2*75)/sqrt(100)
1223-15
1223+15
ppois(4,0.5*5)
ppois(5,0.5*5)
1-ppois(4,0.5*5)
6/32
t.test(1100)
2.3*30
?t.test
?qt
qt(1100,8)
qt(0.95, df=8, lower.tail= FALSE)
qt(0.95, df=8)
qt(0.95, df=8)*30
qt(0.95, df=8)*30+1100
qt(0.975, df=8)*30+1100
qt(0.975, df=8)
qt(0.975, df=8)*(1/2.3)
qt(0.975, df=8)*(1/2.306004)
qt(0.975, df=8)*(2/2.306004)
(2/2.306004)
qt(0.975, df=8)*2.1-2
qt(0.975, df=8)*0.3-2
(qt(0.975, df=8)*0.3)-2
(qt(0.975, df=8)*1.5)-2
(qt(0.975, df=8)*2.6)-2
(qt(0.975, df=8)*2.6)+2
(qt(0.975, df=8)*0.3)+2
(qt(0.975, df=9)*0.6)-2
(qt(0.975, df=19)*0.6)-2
qt(0.975, df=8)
qt(0.975, df=8)*29+11--
qt(0.975, df=8)*29+1100
?rexp
rexp(40,0.2)
rexp(40,0.)
rexp(40)
rexp(40,0.2)
avgs<-c(1:1000)
for (i 1:1000){avgs[i]<-rexp(40,0.2)}
for (i in 1:1000){avgs[i]<-rexp(40,0.2)}
warnings()
for (i in 1:1000){avgs[i]<-mean(rexp(40,0.2))}
hist(avgs)
1/0.2
M<-mean(avgs)
M
V<-var(avgs)
V<-var(avgs)/1000
0.2^2
1/0.04
1/(0.04*40)
V<-var(avgs)
V
p<-c(.1,.2,.3,.4)
x<-2:5
e<-p*x
e2<-e^2
ex2<-p*x^2
ex2-e2
sum(ex2)-sum(e2)
x^2*p
p*x^2
sum(p*x^2)
sum(ex2)
sum(e)^2
sum(e2)
1160-1020/50
(1160-1020)/50
?qnorm
qnorm(0.75,mean = 1020, sd = 50)
?ppois
0.88*0.05/(0.88*0.05+(1-0.88)*0.95)
0.88*0.05/(0.88*0.05+(1-0.93)*0.95)
?qnorm
qnorm(0.95,mean = 100, sd = 10)
?choose
choose(5,6)+choose(6,6)
?pnorm
pnorm(0.51,mean = 0.5, sd = (sqrt(1/12)))
qnorm(0.51,mean = 0.5, sd = (sqrt(1/12)))
?ppois
ppois(20,16.5*2)
set.seed(3)
lambda <- 0.2
num_sim <- 1000
sample_size <- 40
sim <- matrix(rexp(num_sim*sample_size, rate=lambda), num_sim, sample_size)
row_means <- rowMeans(sim)
# plot the histogram of averages
hist(row_means, breaks=50, prob=TRUE,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
# density of the averages of samples
lines(density(row_means))
# theoretical center of distribution
abline(v=1/lambda, col="red")
# theoretical density of the averages of samples
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2)
# add legend
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("black", "red"))
qqnorm(row_means); qqline(row_means)
lambda_vals <- seq(4, 6, by=0.01)
coverage <- sapply(lambda_vals, function(lamb) {
mu_hats <- rowMeans(matrix(rexp(sample_size*num_sim, rate=0.2),
num_sim, sample_size))
ll <- mu_hats - qnorm(0.975) * sqrt(1/lambda**2/sample_size)
ul <- mu_hats + qnorm(0.975) * sqrt(1/lambda**2/sample_size)
mean(ll < lamb & ul > lamb)
})
library(ggplot2)
qplot(lambda_vals, coverage) + geom_hline(yintercept=0.95)
> set.seed(3)
> lambda <- 0.2
> num_sim <- 1000
> sample_size <- 40
> sim <- matrix(rexp(num_sim*sample_size, rate=lambda), num_sim, sample_size)
> row_means <- rowMeans(sim)
> # plot the histogram of averages
> hist(row_means, breaks=50, prob=TRUE,
+      main="Distribution of averages of samples,
+      drawn from exponential distribution with lambda=0.2",
+      xlab="")
set.seed(3)
lambda <- 0.2
num_sim <- 1000
sample_size <- 40
sim <- matrix(rexp(num_sim*sample_size, rate=lambda), num_sim, sample_size)
row_means <- rowMeans(sim)
hist(row_means, breaks=50, prob=TRUE,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
lines(density(row_means))
abline(v=1/lambda, col="red")
lambda <- 0.2
> num_sim <- 1000
> sample_size <- 40
> sim <- matrix(rexp(num_sim*sample_size, rate=lambda), num_sim, sample_size)
> row_means <- rowMeans(sim)
> hist(row_means, breaks=50, prob=TRUE,
+      main="Distribution of averages of samples,
+      drawn from exponential distribution with lambda=0.2",
+      xlab="")
> lines(density(row_means))
> abline(v=1/lambda, col="red")
lines(xfit, yfit, pch=22, col="blue")
lines(xfit, yfit, pch=22, col="red")
legend('topright', c("sim", "CLT"), lty = c(1,1), col=c("black", "red"))
var<-var(sim)
lambda <- 0.2
hist(row_means, breaks=50, prob=TRUE,
```{r}
# plot the histogram of means
hist(row_means, breaks=50, prob=TRUE,
main="Distribution of means",
xlab="")
# density of the averages of samples
lines(density(row_means))
# theoretical density of the averages of samples
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red")
# add legend
legend('topright', c("sim", "CLT"), lty = c(1,1), col=c("black", "red"))
lambda <- 0.2
num_sim <- 1000
sample_size <- 40
sim <- matrix(rexp(num_sim*sample_size, rate=lambda), num_sim, sample_size)
row_means <- rowMeans(sim)
# plot the histogram of means
hist(row_means, breaks=50, prob=TRUE,
main="Distribution of means",
xlab="")
# density of the averages of samples
lines(density(row_means))
# theoretical density of the averages of samples
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red")
# add legend
legend('topright', c("sim", "CLT"), lty = c(1,1), col=c("black", "red"))
mean<-mean(rowmeans)
var<-var(sim)
mean<-mean(row_means)
var<-var(sim)
var(sim)
View(var)
View(sim)
var(row_means)
mean<-mean(row_means)
variance<-var(row_means)
t_mean<- 1/lambda
t_variance<- (1/lambda/sqrt(sample_size))^2
?t.test
t.test(mean,t_mean)
mean<-mean(row_means)
variance<-var(row_means)
stdev<-sd(row_means)
t_mean<- 1/lambda
t_variance<- (1/lambda/sqrt(sample_size))^2
?qqnorm
??qqline
qqnorm(row_means)
qqline(row_means,col = 2)
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
head(ToothGrowth)
view(ToothGrowth)
f<-ToothGrowth
View(f)
library(datasets)
library(ggplot2)
summary(ToothGrowth)
t.test(len~supp, data = ToothGrowth)
tdata05<- subset(ToothGrowth$dose==0.5)
?subset
tdata05<- subset(f$dose==0.5)
tdata1<- subset(ToothGrowth, dose %in% c(0.5,1.0))
t.test(len~supp, data = tdata1)
tdata2<- subset(ToothGrowth, dose %in% c(1.0,2.0))
t.test(len~supp, data = tdata2)
tdata3<- subset(ToothGrowth, dose %in% c(0.5,2.0))
t.test(len~supp, data = tdata3)
View(tdata1)
tdata1<- subset(ToothGrowth, dose %in% c(0.5,1.0))
t.test(len~supp, data = tdata1)
wk1<-c(140,138,150,148,135)
wk2<-c(132,135,151,146,130)
?t.test
t.test(wk1,wk2,paired=TRUE)
2.78/1.1
(3-2.78)/1.1
0.22/1.1
0.2*30
1.984*(1.1/sqrt(100))
2.306*(30/sqrt(9))
alpha = 0.05
z = qnorm(1 - alpha)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
mu0 = 0.1
sigma = 0.04
n = 100
z = qnorm(1 - alpha)
mua = 0
pnorm(mu0 + z * sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
0.04/(sqrt(100))
1.984*0.004
1.984*0.004+0.01
1787/10
?lm
data(mtcars)
head(mtcars)
mtcars$cyl<-factor(mtcars$cyl)
fit<-lm(mpg~cyl+wt,data=mtcars)
summary(fit)
fit2<-lm(mpg~cyl,data=mtcars)
summary(fit2)
?mtcars
x<-c(0.586,0.166,-0.042,-0.614,11.72)
y<-c(0.549,-0.026,-0.127,-0.751,1.344)
fitxy<-lm(y~x)
summary.lm(fitxy)
lm.hat(fitxy)
hat(fitxy)
plot(fitxy)
inf=lm.influence(fitxy)
inf
dfbetas(fitxy)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
data(alzheimerDisease)
data(AlzheimerDisease)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
?createDataPartition
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(,training$CompressiveStrength, colour=training$BlastFurnaceSlag)
qplot(,training$CompressiveStrength, colour=training$FlyAsh)
qplot(,training$CompressiveStrength, colour=training$Age)
log(-1)
sumarry(training$plasticizer)
summary(training$plasticizer)
View(training)
min(training$plasticizer)
log(0)
?hist
hist(training$plasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preprocess
?preProcess
?grep
grepl("IL", names(predictors))
ilpredict<-predictors[,grepl("IL", names(predictors))]
?preProcess
pcas<-preProcess(ilpredict,method = "pca", thresh = 0.9)
summary(pcas)
pcas<-preProcess(ilpredict,method = "pca", thresh = 0.8)
summary(pcas)
pcas<-preProcess(ilpredict,method = "pca", thresh = 0.9)
pcas$rotation
?train
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tr<-train(training,diagnosis,method = "glm")
summary(diagnosis)
tr<-train(training,method = "glm")
tr<-train(training,diagnosis[,inTrain],method = "glm")
d<-diagnosis[,inTrain]
d<-diagnosis[inTrain,]
d<-data.fram(diagnosis)
d<-data.frame(diagnosis)
d
diag<-d[inTrain,]
summary(diag)
sumary(diagnosis)
summary(diagnosis)
tr<-train(training,diag,method = "glm")
